"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = require("path");
const fs_1 = require("fs");
const fs_jetpack_1 = require("fs-jetpack");
const typedi_1 = require("typedi");
const apollo_server_koa_1 = require("apollo-server-koa");
const type_graphql_1 = require("type-graphql");
const graphql_1 = require("graphql");
const isodate_1 = require("./scalars/isodate");
const timestamp_1 = require("./scalars/timestamp");
const addDirective_1 = tslib_1.__importDefault(require("./addDirective"));
function isClass(func) {
    return typeof func === 'function' && /^class\s/.test(Function.prototype.toString.call(func));
}
class GraphQLServer {
    constructor(app, server) {
        this.app = app;
        this.koaServer = server;
        this.graphqlConfig = app.config.typeGraphQL;
    }
    getDirectives() {
        const { baseDir } = this.app;
        const directivesDir = path_1.join(baseDir, 'app', 'directive');
        if (!fs_1.existsSync(directivesDir))
            return {};
        const matching = this.app.config.env === 'local' ? '*.ts' : '*.js';
        const files = fs_jetpack_1.find(directivesDir, { matching });
        return files.reduce((prev, cur) => {
            const directivePath = path_1.join(baseDir, cur);
            const name = path_1.basename(directivePath).replace(/(.ts)|(.js)$/, '');
            return Object.assign({}, prev, { [name]: require(directivePath).default });
        }, {});
    }
    getResolverClassFromFile(resolverPath) {
        const resolverModule = require(resolverPath);
        const resolvers = Object.keys(resolverModule).reduce((result, cur) => {
            if (isClass(resolverModule[cur]) && resolverModule[cur].toString().includes('Resolver')) {
                if (!result.includes(resolverModule[cur])) {
                    result.push(resolverModule[cur]);
                }
            }
            return result;
        }, []);
        return resolvers;
    }
    loadResolvers() {
        const { baseDir } = this.app;
        const appDir = path_1.join(baseDir, 'app');
        let resolvers = [];
        if (!fs_1.existsSync(appDir)) {
            this.app.logger.warn('[egg-type-graphql]', '缺少 resolver 文件');
            return [];
        }
        // TODO: handle other env
        const matching = this.app.config.env === 'local' ? '*.resolver.ts' : '*.resolver.js';
        const files = fs_jetpack_1.find(appDir, { matching });
        if (!files.length) {
            this.app.logger.error('[egg-type-graphql]', '缺少 resolver');
            return [];
        }
        try {
            for (const file of files) {
                const resolverPath = path_1.join(baseDir, file);
                const resolversFromFile = this.getResolverClassFromFile(resolverPath);
                if (!resolversFromFile.length) {
                    this.app.logger.error('[egg-type-graphql]', `${file} 文件必须存在至少一Resolver`);
                }
                resolvers = [...resolvers, ...resolversFromFile];
            }
        }
        catch (e) {
            this.app.logger.error('[egg-type-graphql]', e);
        }
        return resolvers;
    }
    setDirective(schema) {
        const { typeDefs } = this.graphqlConfig;
        if (typeDefs) {
            schema = graphql_1.extendSchema(schema, graphql_1.parse(typeDefs));
        }
        const resolverMap = this.getDirectives();
        if (Object.keys(resolverMap).length) {
            return addDirective_1.default(schema, resolverMap || {});
        }
        return schema;
    }
    async getSchema() {
        const { scalarsMap = [], dateScalarMode } = this.graphqlConfig;
        let schema;
        const resolvers = this.loadResolvers();
        if (!resolvers.length)
            return null;
        const defaultScalarMap = [
            {
                type: Date,
                scalar: dateScalarMode === 'timestamp' ? timestamp_1.GraphQLTimestamp : isodate_1.GraphQLISODateTime,
            },
        ];
        try {
            schema = await type_graphql_1.buildSchema({
                resolvers,
                dateScalarMode: 'isoDate',
                scalarsMap: [...defaultScalarMap, ...scalarsMap],
                emitSchemaFile: true,
                validate: this.graphqlConfig.validate,
                globalMiddlewares: this.graphqlConfig.globalMiddlewares || [],
                container: typedi_1.Container,
            });
            return this.setDirective(schema);
        }
        catch (e) {
            this.app.logger.error('[egg-type-graphql]', e);
        }
    }
    async start() {
        const schema = await this.getSchema();
        if (!schema)
            return null;
        const apolloConfig = {
            schema,
            tracing: false,
            context: ({ ctx }) => ctx,
            playground: {
                settings: {
                    'request.credentials': 'include',
                },
            },
            introspection: true,
        };
        const server = new apollo_server_koa_1.ApolloServer(apolloConfig);
        server.applyMiddleware({
            app: this.app,
            path: this.graphqlConfig.router,
            cors: false,
        });
        server.installSubscriptionHandlers(this.koaServer);
        this.app.logger.info('[egg-type-graphql] GraphQL server started');
    }
}
exports.default = GraphQLServer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3JhcGhRTFNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkdyYXBoUUxTZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQXNDO0FBQ3RDLDJCQUFnQztBQUNoQywyQ0FBa0M7QUFDbEMsbUNBQW1DO0FBR25DLHlEQUF5RDtBQUN6RCwrQ0FBeUQ7QUFDekQscUNBQWdGO0FBRWhGLCtDQUF1RDtBQUN2RCxtREFBdUQ7QUFDdkQsMEVBQTBDO0FBZ0IxQyxTQUFTLE9BQU8sQ0FBQyxJQUFTO0lBQ3hCLE9BQU8sT0FBTyxJQUFJLEtBQUssVUFBVSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDL0YsQ0FBQztBQUVELE1BQXFCLGFBQWE7SUFLaEMsWUFBWSxHQUFnQixFQUFFLE1BQVc7UUFDdkMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztRQUN4QixJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO0lBQzlDLENBQUM7SUFFRCxhQUFhO1FBQ1gsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDN0IsTUFBTSxhQUFhLEdBQUcsV0FBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLGVBQVUsQ0FBQyxhQUFhLENBQUM7WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUUxQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNuRSxNQUFNLEtBQUssR0FBRyxpQkFBSSxDQUFD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