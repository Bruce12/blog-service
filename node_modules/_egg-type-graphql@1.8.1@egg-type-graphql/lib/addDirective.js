"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const graphql_1 = require("graphql");
const graphqlLanguage = tslib_1.__importStar(require("graphql/language"));
const graphqlType = tslib_1.__importStar(require("graphql/type"));
const execution_1 = require("graphql/execution");
const DirectiveLocation = graphqlLanguage.DirectiveLocation || graphqlType.__DirectiveLocation;
const BUILT_IN_DIRECTIVES = ['deprecated', 'skip', 'include'];
function forEachField(schema, fn) {
    const typeMap = schema.getTypeMap();
    Object.keys(typeMap).forEach(typeName => {
        const type = typeMap[typeName];
        // TODO: maybe have an option to include these?
        if (!graphql_1.getNamedType(type).name.startsWith('__') &&
            type instanceof graphql_1.GraphQLObjectType) {
            const fields = type.getFields();
            Object.keys(fields).forEach(fieldName => {
                const field = fields[fieldName];
                fn(field, typeName, fieldName);
            });
        }
    });
}
function getFieldResolver(field) {
    const resolver = field.resolve || graphql_1.defaultFieldResolver;
    return resolver.bind(field);
}
function createAsyncResolver(field) {
    const originalResolver = getFieldResolver(field);
    const resolverFn = async (source, args, context, info) => originalResolver(source, args, context, info);
    return resolverFn;
}
function getDirectiveInfo(directive, resolverMap, schema, location, variables) {
    const name = directive.name.value;
    const Directive = schema.getDirective(name);
    if (typeof Directive === 'undefined') {
        throw new Error(`Directive @${name} is undefined. ` +
            'Please define in schema before using.');
    }
    if (!Directive || !Directive.locations.includes(location)) {
        throw new Error(`Directive @${name} is not marked to be used on "${location}" location. ` +
            `Please add "directive @${name} ON ${location}" in schema.`);
    }
    const resolver = resolverMap[name];
    if (!resolver && !BUILT_IN_DIRECTIVES.includes(name)) {
        throw new Error(`Directive @${name} has no resolver.` +
            'Please define one using createFieldExecutionResolver().');
    }
    const args = execution_1.getDirectiveValues(Directive, { directives: [directive] }, variables) || {};
    return { args, resolver };
}
function createFieldExecutionResolver(field, resolverMap, schema) {
    if (!field.astNode)
        return getFieldResolver(field);
    const { directives } = field.astNode;
    if (!directives || !directives.length)
        return getFieldResolver(field);
    return directives.reduce((prevResolver, directive) => {
        const directiveInfo = getDirectiveInfo(directive, resolverMap, schema, DirectiveLocation.FIELD_DEFINITION);
        const resolverFn = (source, args, context, info) => directiveInfo.resolver({
            resolve: () => prevResolver(source, args, context, info),
            source,
            args: directiveInfo.args,
            context,
            info,
        });
        return resolverFn;
    }, createAsyncResolver(field));
}
function createFieldResolver(field, resolverMap, schema) {
    const originalResolver = getFieldResolver(field);
    const asyncResolver = createAsyncResolver(field);
    const resolverFn = (source, args, context, info) => {
        const { directives } = info.fieldNodes[0];
        if (!directives || !directives.length) {
            return originalResolver(source, args, context, info);
        }
        const fieldResolver = directives.reduce((prevResolver, directive) => {
            const directiveInfo = getDirectiveInfo(directive, resolverMap, schema, DirectiveLocation.FIELD, info.variableValues);
            const value = () => directiveInfo.resolver({
                resolve: () => prevResolver(source, args, context, info),
                source,
                args: directiveInfo.args,
                context,
                info,
            });
            return () => value();
        }, asyncResolver);
        return fieldResolver(source, args, context, info);
    };
    return resolverFn;
}
function addDirectiveResolveFunctionsToSchema(schema, resolverMap) {
    if (typeof resolverMap !== 'object') {
        throw new Error(`Expected resolverMap to be of type object, got ${typeof resolverMap}`);
    }
    if (Array.isArray(resolverMap)) {
        throw new Error('Expected resolverMap to be of type object, got Array');
    }
    forEachField(schema, field => {
        field.resolve = createFieldExecutionResolver(field, resolverMap, schema);
        field.resolve = createFieldResolver(field, resolverMap, schema);
    });
    return schema;
}
exports.default = addDirectiveResolveFunctionsToSchema;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkRGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWRkRGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQVFnQjtBQUNoQiwwRUFBbUQ7QUFDbkQsa0VBQTJDO0FBQzNDLGlEQUFzRDtBQUV0RCxNQUFNLGlCQUFpQixHQUNyQixlQUFlLENBQUMsaUJBQWlCLElBQUksV0FBVyxDQUFDLG1CQUFtQixDQUFBO0FBRXRFLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxZQUFZLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFBO0FBYTdELFNBQVMsWUFBWSxDQUFDLE1BQXFCLEVBQUUsRUFBbUI7SUFDOUQsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBRW5DLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ3RDLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUU5QiwrQ0FBK0M7UUFDL0MsSUFDRSxDQUFDLHNCQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDekMsSUFBSSxZQUFZLDJCQUFpQixFQUNqQztZQUNBLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQTtZQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDdEMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO2dCQUMvQixFQUFFLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQTtZQUNoQyxDQUFDLENBQUMsQ0FBQTtTQUNIO0lBQ0gsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxLQUFLO0lBQzdCLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxPQUFPLElBQUksOEJBQW9CLENBQUE7SUFDdEQsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzdCLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUFDLEtBQUs7SUFDaEMsTUFBTSxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNoRCxNQUFNLFVBQVUsR0FBbUMsS0FBSyxFQUN0RCxNQUFNLEVBQ04sSUFBSSxFQUNKLE9BQU8sRUFDUCxJQUFJLEVBQ0osRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQ2xELE9BQU8sVUFBVSxDQUFBO0FBQ25CLENBQUM7QUFFRCxTQUFTLGdCQUFnQixDQUN2QixTQUF3QixFQUN4QixXQUF3QixFQUN4QixNQUFxQixFQUNyQixRQUFhLEVBQ2IsU0FBZTtJQUVmLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFBO0lBRWpDLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFM0MsSUFBSSxPQUFPLFNBQVMsS0FBSyxXQUFXLEVBQUU7UUFDcEMsTUFBTSxJQUFJLEtBQUssQ0FDYixjQUFjLElBQUksaUJBQWlCO1lBQ2pDLHVDQUF1QyxDQUMxQyxDQUFBO0tBQ0Y7SUFFRCxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDekQsTUFBTSxJQUFJLEtBQUssQ0FDYixjQUFjLElBQUksaUNBQWlDLFFBQVEsY0FBYztZQUN2RSwwQkFBMEIsSUFBSSxPQUFPLFFBQVEsY0FBYyxDQUM5RCxDQUFBO0tBQ0Y7SUFFRCxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDbEMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNwRCxNQUFNLElBQUksS0FBSyxDQUNiLGNBQWMsSUFBSSxtQkFBbUI7WUFDbkMseURBQXlELENBQzVELENBQUE7S0FDRjtJQUVELE1BQU0sSUFBSSxHQUNSLDhCQUFrQixDQUFDLFNBQVMsRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFBO0lBQzdFLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUE7QUFDM0IsQ0FBQztBQUVELFNBQVMsNEJBQTRCLENBQ25DLEtBQTZCLEVBQzdCLFdBQXdCLEVBQ3hCLE1BQXFCO0lBRXJCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTztRQUFFLE9BQU8sZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDbEQsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUE7SUFDcEMsSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNO1FBQUUsT0FBTyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNyRSxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLEVBQUU7UUFDbkQsTUFBTSxhQUFhLEdBQUcsZ0JBQWdCLENBQ3BDLFNBQVMsRUFDVCxXQUFXLEVBQ1gsTUFBTSxFQUNOLGlCQUFpQixDQUFDLGdCQUFnQixDQUNuQyxDQUFBO1FBQ0QsTUFBTSxVQUFVLEdBQW1DLENBQ2pELE1BQU0sRUFDTixJQUFJLEVBQ0osT0FBTyxFQUNQLElBQUksRUFDSixFQUFFLENBQ0YsYUFBYSxDQUFDLFFBQVEsQ0FBQztZQUNyQixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQztZQUN4RCxNQUFNO1lBQ04sSUFBSSxFQUFFLGFBQWEsQ0FBQyxJQUFJO1lBQ3hCLE9BQU87WUFDUCxJQUFJO1NBQ0wsQ0FBQyxDQUFBO1FBQ0osT0FBTyxVQUFVLENBQUE7SUFDbkIsQ0FBQyxFQUFFLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFDaEMsQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQzFCLEtBQTZCLEVBQzdCLFdBQXdCLEVBQ3hCLE1BQXFCO0lBRXJCLE1BQU0sZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDaEQsTUFBTSxhQUFhLEdBQUcsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUE7SUFFaEQsTUFBTSxVQUFVLEdBQW1DLENBQ2pELE1BQU0sRUFDTixJQUFJLEVBQ0osT0FBTyxFQUNQLElBQUksRUFDSixFQUFFO1FBQ0YsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFFekMsSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUU7WUFDckMsT0FBTyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQTtTQUNyRDtRQUVELE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLEVBQUU7WUFDbEUsTUFBTSxhQUFhLEdBQUcsZ0JBQWdCLENBQ3BDLFNBQVMsRUFDVCxXQUFXLEVBQ1gsTUFBTSxFQUNOLGlCQUFpQixDQUFDLEtBQUssRUFDdkIsSUFBSSxDQUFDLGNBQWMsQ0FDcEIsQ0FBQTtZQUVELE1BQU0sS0FBSyxHQUFHLEdBQUcsRUFBRSxDQUNqQixhQUFhLENBQUMsUUFBUSxDQUFDO2dCQUNyQixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQztnQkFDeEQsTUFBTTtnQkFDTixJQUFJLEVBQUUsYUFBYSxDQUFDLElBQUk7Z0JBQ3hCLE9BQU87Z0JBQ1AsSUFBSTthQUNMLENBQUMsQ0FBQTtZQUNKLE9BQU8sR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDdEIsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFBO1FBRWpCLE9BQU8sYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQ25ELENBQUMsQ0FBQTtJQUNELE9BQU8sVUFBVSxDQUFBO0FBQ25CLENBQUM7QUFFRCxTQUFTLG9DQUFvQyxDQUMzQyxNQUFxQixFQUNyQixXQUF3QjtJQUV4QixJQUFJLE9BQU8sV0FBVyxLQUFLLFFBQVEsRUFBRTtRQUNuQyxNQUFNLElBQUksS0FBSyxDQUNiLGtEQUFrRCxPQUFPLFdBQVcsRUFBRSxDQUN2RSxDQUFBO0tBQ0Y7SUFFRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7UUFDOUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxzREFBc0QsQ0FBQyxDQUFBO0tBQ3hFO0lBRUQsWUFBWSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRTtRQUMzQixLQUFLLENBQUMsT0FBTyxHQUFHLDRCQUE0QixDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDeEUsS0FBSyxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ2pFLENBQUMsQ0FBQyxDQUFBO0lBQ0YsT0FBTyxNQUFNLENBQUE7QUFDZixDQUFDO0FBRUQsa0JBQWUsb0NBQW9DLENBQUEifQ==