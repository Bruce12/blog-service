import { Application } from 'egg';
import { MiddlewareFn } from 'type-graphql';
import { GraphQLSchema, GraphQLScalarType } from 'graphql';
interface ScalarsMapItem {
    type: any;
    scalar: GraphQLScalarType;
}
interface GraphQLConfig {
    router: string;
    validate?: boolean;
    globalMiddlewares?: Array<MiddlewareFn<any>>;
    scalarsMap?: ScalarsMapItem[];
    dateScalarMode?: 'isoDate' | 'timestamp';
    typeDefs?: string;
}
export default class GraphQLServer {
    readonly app: Application;
    graphqlConfig: GraphQLConfig;
    koaServer: any;
    constructor(app: Application, server: any);
    getDirectives(): any;
    getResolverClassFromFile(resolverPath: string): any[];
    loadResolvers(): any[];
    setDirective(schema: GraphQLSchema): GraphQLSchema;
    getSchema(): Promise<GraphQLSchema | null | undefined>;
    start(): Promise<null | undefined>;
}
export {};
